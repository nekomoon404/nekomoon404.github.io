{"meta":{"title":"nekomoon的个人小站","subtitle":"","description":"","author":"nekomoon","url":"http://nekomoon404.github.io","root":"/"},"pages":[{"title":"categories","date":"2020-01-17T12:15:51.000Z","updated":"2020-01-17T12:45:26.408Z","comments":false,"path":"categories/index.html","permalink":"http://nekomoon404.github.io/categories/index.html","excerpt":"","text":""},{"title":"about","date":"2020-01-17T12:16:07.000Z","updated":"2020-01-17T12:45:38.714Z","comments":false,"path":"about/index.html","permalink":"http://nekomoon404.github.io/about/index.html","excerpt":"","text":""},{"title":"tags","date":"2020-01-17T12:15:21.000Z","updated":"2020-01-17T12:45:12.630Z","comments":false,"path":"tags/index.html","permalink":"http://nekomoon404.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"C++基础（一）数组","slug":"C-基础（一）数组","date":"2020-01-23T14:11:50.000Z","updated":"2020-01-23T14:13:39.670Z","comments":true,"path":"2020/01/23/C-基础（一）数组/","link":"","permalink":"http://nekomoon404.github.io/2020/01/23/C-%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%80%EF%BC%89%E6%95%B0%E7%BB%84/","excerpt":"","text":"数组数组是一种类似于标准库类型vector的数据结构，与vector相似的是，数组也是存放类型相同的对象的容器，这些对象需要通过其所在位置访问；与vector不同的是，数组的大小确定不变，不能随意向数组中增加元素。 定义和初始化内置数组数组的声明形如 a[d] ，其中a是数组的名字，d是数组的维度。维度必须是一个常量表达式。 123456constexpr unsigned sz = 42; //常量表达式int arr[10];int *parr[sz];unsigned cnt = 42; // 不是常量表达式string bad[cnt]; // 错误：cnt不是常量表达式 默认情况下，数组的元素被默认初始化。定义数组的时候必须指定数组的类型，不能用auto关键字由初始值的列表推断类型。数组的元素应为对象，因此不存在引用的数组。 显式初始化数组元素可以对数组的元素进行列表初始化，如果没有指明维度，编译器会根据初始值的数量计算并推测出来；若指明了维度，那么初始值的总数量不应该超出指定的大小；如果维度比提供的初始值数量大，则剩下的元素被初始化成默认值。 123456const unsigned sz = 3;int ial[sz] = &#123;0, 1, 2&#125;;int a2[] = &#123;0, 1, 2&#125;;int a3[5] = &#123;0, 1, 2&#125;;string a4[3] = &#123;\"hi\", \"bye\"&#125;;int a5[2] = &#123;0, 1, 2&#125;; //错误 字符数组的特殊性当使用字符串字面值对字符数组初始化时，一定要注意字符串字面值的结尾处还有一个空字符。 1234char a1[] = &#123;'C', '+', '+'&#125;; //列表初始化，没有空字符char a2[] = &#123;'C', '+', '+', '\\0'&#125;; //列表初始化，含有显式的空字符char a3[] = \"C++\"; //用字符换字面值初始化，自动添加表示字符串结束的空字符const char a4[6] = \"Daniel\" //错误：没有空间放空字符 不允许拷贝和赋值不能将数组的内容拷贝给其他数组作为初始值，也不能用数组为其他数组赋值。 复杂的数组声明数组能存放大多数类型的对象，可以定义一个存放指针的数组；又因为数组本身是对象，所以允许定义数组的指针及数组的引用。默认情况下，类型修饰符从右向左依次绑定。就数组而言，从数组的名字开始由内向外阅读更容易理解。 12345int *ptrs[10]; //ptrs是含有10个整型指针的数组int &amp;refs[10] = /* ？ */ //错误：不存在引用的数组int (*Parray)[10] = &amp;arr; //Parray是一个指针，指向一个含有10个整数的数组int (&amp;arrRef)[10] = arr; //arrRef是一个引用，引用一个含有10个整数的数组int *(&amp;arry)[10] = ptrs; //arry是一个引用，引用一个含有10个指针的数组 练习3.27 设txt_size是一个无参数的函数，它的返回值是int。下列哪些定义是非法的？为什么？ 12345unsigned buf_size = 1024;int ia[buf_size]; //非法的，因为buf_size不是一个常量表达式int ia[4*7-14]; //正确，因为4*7-14是一个常量表达式int ia[txt_size()]; //非法的，因为txt_size没有被定义为常量表达式 constexprchar st[11] = \"fundamental\" //非法的，因为用字符串字面值初始化，没有空间存放空字符 3.28 下列数组中元素的值是什么？ 访问数组元素与标准库类型vector 和string 一样，数组的元素也能使用范围for 语句或下标运算符来访问。数组的索引从0开始。 数组下标通常定义为size_t类型，size_t是一种机器相关的无符号类型，在cstddef头文件中定义。 1234567//以10分为一个分段统计成绩的数量：0~9.10~19，...，90~99,100unsigned scores[11] = &#123;&#125;; //列表初始化，初值为0；若不初始化，在函数内不执行默认初始化。unsigned grade;while (cin &gt;&gt; grade) &#123; if (grade &lt;= 100) ++scores[grade/10];&#125; 与vector 和string 一样，当需要遍历数组的所有元素时，最好的办法是使用范围for语句。 1234//对于scores中的每个计数值输出当前的计数值for (auto i : scores) cout &lt;&lt; i &lt;&lt; \" \";cout&lt;&lt;endl; 必须要检查数组下标的值在合理范围内，下标越界会产生缓冲区溢出。 练习3.31编写一段程序，定义一个含有10个int的数组，令每个元素的值就是其下标值。 123456789101112131415include&lt;iostream&gt;using namespace std;int main()&#123; const int sz = 10; int a[sz]; for(int i = 0; i &lt; sz; i++) a[i] = i; for(auto val: a) cout &lt;&lt; val &lt;&lt; \" \"; cout&lt;&lt;endl; return 0;&#125; 3.32 将上一题创建的数组拷贝给另外一个数组，利用vector重写程序，实现类似的功能。 //如果要把数组的内容拷贝给另外一个数组，不能直接对数值使用赋值运算符，而应该逐一拷贝数组的元素。 1234567891011121314include&lt;iostream&gt;using namespace std;int main()&#123; const int sz = 10; int a[sz], b[sz]; for(int i = 0; i &lt; sz; i++) a[i] = i; for(int j = 0; j &lt; sz: j++) b[j] = a[j]; return 0;&#125; //用vector重写 123456789101112131415161718#include&lt;iostream&gt;#include&lt;vector&gt;using namespace std;int main()&#123; const int sz = 10; vector&lt;int&gt; vInt, vInt2; for (int i = 0; i &lt; sz; i++) vInt.push_back(i); for (int j = 0; j &lt; sz; j++) vInt2.push_back(vInt[j]); for (auto val: vInt2) cout &lt;&lt; val &lt;&lt; \" \"; cout&lt;&lt;endl; return 0;&#125;","categories":[],"tags":[]},{"title":"搭建自己的博客","slug":"搭建自己的博客","date":"2020-01-18T03:08:31.000Z","updated":"2020-01-18T05:42:11.186Z","comments":true,"path":"2020/01/18/搭建自己的博客/","link":"","permalink":"http://nekomoon404.github.io/2020/01/18/%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/","excerpt":"","text":"1.安装GitGIt是目前世界上最先进的分布式版本控制系统，其开发者就是Linux的作者Linus Torvalds。可以到Git的官网下载：https://gitforwindows.org/，在安装选项设置页面中勾选Git Bash Here和Git GUI Here。 2.安装node.js在官网选择LTS版本下载安装即可：https://nodejs.org/en/download/。 3.安装Hexo在本地磁盘中建立一个文件夹来存储博客的本地文件，如D:\\blog。进入blog文件夹，单机右键，菜单中选择Git Bash Here。在命令框中依次执行以下命令安装Hexo。 1npm install -g hexo-cli 初始化博客 1hexo init 启动服务：依次执行以下命令 12345npm stallhexo shexo chexo ghexo d 浏览器打开本地访问页面 ，使用ctrl+c可关闭服务。若不能访问可尝试用以下命令解决： 1npm install hexo-deployer-git --save 之后每次更新博客内容后都要执行 hexo c –&gt;hexo g –&gt;hexo d，来重新部署。 4.将Hexo部署到GitHub在GitHub中创建一个新的repository，repository name必须是 用户名.github.io 的格式 回到Git Bash中，部署用户名和邮箱，其中yourname输入GitHub用户名，youremail输入GitHub的登陆邮箱 12git config --global user.name &quot;yourname&quot;git config --global user.email &quot;youremail&quot; 创建SSH 1ssh-keygen -t rsa -C &quot;youremail&quot; 打开提示已经创建好的.ssh文件夹，其中id_rsa是私人密钥，id_rsa.pub是公共密钥。在GitHub中打开setting –&gt; New SSH key，将id_rsa.pub里面的信息复制进去。 在blog文件夹中打开博客配置文件_config.yml，将最后几行修改为： 1234deploy: type: git repo: https:&#x2F;&#x2F;github.com&#x2F;yourname&#x2F;yourname.github.io.git branch: master 安装deploy-git 1npm install hexo-deployer-git --save 最后重新部署博客 123hexo chexo ghexo d 这样就可以在 http://yourname.github.io 访问自己的博客了。 5.设置主题我安装的是Next主题，网上有很多教程可以参考，我直接安装最新的v6+版本。在blog文件夹下右键GIt Bash Here，下载主题： 1git clone https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;hexo-theme-next themes&#x2F;next 打开blog目录下的博客站点配置文件_config.yml，在开头的Site中添加自己博客的信息，注意将language改为zh-CN： 123456title: # 标题subtitle: # 副标题description: # 站点描述author: # 作者language: zh-CNtimezone: 往下拉，将theme改为next： 1theme: next 重新部署博客即可看到主题已经替换。 接着就是博客的一些具体细节方面的设置，这一部分有很多东西可以学习，我目前只学了一些基础操作。 设置scheme在\\blog\\themes\\next文件夹中打开主题配置文件_config.yml，找到外观scheme，想使用哪一种就把前面的注释符#去掉，我选用的是Mist。 1234#scheme: Musescheme: Mist#scheme: Pisces#scheme: Gemini 设置菜单在主题配置文件_config.yml中找到菜单menu，将需要的项前的#去掉，我保留了about关于，categories分类，tags标签，archives归档。 123456789menu: home: &#x2F; || home about: &#x2F;about&#x2F; || user tags: &#x2F;tags&#x2F; || tags categories: &#x2F;categories&#x2F; || th archives: &#x2F;archives&#x2F; || archive #schedule: &#x2F;schedule&#x2F; || calendar #sitemap: &#x2F;sitemap.xml || sitemap #commonweal: &#x2F;404&#x2F; || heartbeat 创建菜单需要的页面： 123hexo new page abouthexo new page tagshexo new page categories 在\\blog\\source下就会生成对应的文件夹，打开其中的index.md文件，将type设置为相应的内容，以about为例： 1234title: aboutdate: 2020-01-17 20:16:07type: &quot;about&quot; comments: false 设置背景动画在主题配置文件_config.yml中找到Animation Settings，我使用的是Canvas-nest，将Canvas-nest下的enable状态改为true即可： 123canvas_nest: enable: true onmobile: true # Display on mobile or not —————————————————————————— 到这里个人博客就算搭建起来了，但还是比较简陋，之后可以学习将博客完善美化起来。这也是我在这里写下的第一篇文章，使用Typora编辑。 2020年希望自己能成为一个自律的人，也希望这个博客不会只是自己一时兴起的产物。","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2020-01-12T07:14:03.207Z","updated":"2020-01-12T07:14:03.207Z","comments":true,"path":"2020/01/12/hello-world/","link":"","permalink":"http://nekomoon404.github.io/2020/01/12/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}